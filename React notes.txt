EP 2: Igniting App

 -> NPM : "npm init" command to set up npm. It sets up "package.json" file with all the configuration settings of the project.
 -> 2 types of dependencies - dev and normal. Use "-D" to install dependencies as dev dependency.
 -> Use "npm install -D parcel" to install parcel dependency which will set up "package-lock.json" file and "node modules" file.
 -> Node modules contains parcel and its transitive dependencies. Node modules is a collection of dependencies. 
 -> "npx parcel index.html" will set up our app. It will create server for our app. - dev build.
 -> "npm install react" will install react in our project.
 -> "npm install react-dom" to install react DOM.
 -> "npx parcel build index.html" will bundle the project and build it. - prod build.
 -> Parcel functionalities: 
            -Local Server
            -HMR= Hot Module Replacement(Automatic refresh)
            -Uses File watching algorithm in C++
            -Caching: Faster Builds
            -image optimizatParcel : 
            -ion
            -bundling(main job)- it will bundle all the components in to a single js file.
            -compress

EP 3: Laying Foundation

 -> Scripts section in package.json is used to know the exact command to run or build the project.
 -> "npm run start" runs parcel index.html behind the scenes, if it is configured in the scripts of "package.json".
 -> JSX :
        - jsx is not html in js
        - jsx and react are different
        - Browser only understands pure JS ie. eccma script(es6)
        - parcel helps to run jsx code on Browsers
        - prevents cross site malicious attacks while calling API

EP 4: Basic Code- Props
 -> Config driven UI : UI is controlled by config or data.
 -> use key whenever we use map function to avoid unnecessary re-rendering of all elements. It helps in optimization.
 -> Don't use index as a key.
 -> use of "?."  is called optional chaining. It will return undefined instead of throwing error when object is null or has any error.

EP 5 : Lets get Hooked
 -> React uses "Reconciliation Algorithm" (React Fiber- reacts core algorithm) to update Ui faster in sync with data for efficient DOM manipulation:
    here it creates virtual DOM from the actual DOM and every time updates the virtual DOM when there is a change in the data(Diff algorithm).

EP 7 : Finding the path
 -> If no dependency array, useEffect is called on every render.
 -> If empty dependency array [], useEffect is called on initial render (Just once).
 -> If dependency array is state variable, useEffect is called on initial render and then everytime the state changes.
 -> Create state variables only at the higher level inside functional components.
 -> createBrowserRouter component is used to make routes(routing configuraton).
 -> RouterProvider component is used to provide routing configuraton to our app.
 
EP 8 : Lets get classy
 -> Life cycle of react class component: 
    Parent constructor -> parent render ->(Child constructor -> child render -> Child componentDidMount) -> parent componentDidMount
    componentDidMount(initial render) -> componentDidUpdate(update after initial render)-> componentWillUnmount(when we leave component)
 -> When using class components, always clear set intervals and timeouts in the componentWillUnmount method as
    they will be called after every componentDidMount method if declared inside it.
 -> While working with functional component:
    render -> useEffect -> useEffect return(when we leave component)

EP 9 : Optimizing app
 -> Try to follow SRP(single responsibility principle) - one component should only perform one action.
 -> Try to break app into smaller chunks using SRP for re-usability, better code understanding, testing and code optimization.
 -> use Lazy loading using suspense to load components on demand.

Ep 11 : Data is the new oil 
 -> Higher order components(used to modify primary componenet based on condition).
 -> Lifting the state up (Sharing state with siblings) : we can indirectly update state variable of parent from child componenet by passing setStateFunction as a prop to the child.
 -> Use CreateContext and useContext to store and use data any where inside app.
 -> Context is a golbal space which can be provided to either whole app or just a small portion of the app.
 -> Context is used for small scale applications. It is inbuild feature of react.

EP 12 : Building our store (Redux)
 -> redux is a state container for JS app.
 -> Redux offers easy debugging.
 -> Redux store is made of group of slices where each individual slice is used to store different group of data.(Eg: Cart slice, user slice)
 -> On clicking Add button, it dispatches the action which calls the reducer function which updates the slice of redux store.
 -> we can read data from slice using selector (This action is called subscribing the store).
 -> Redux flow: 
               - install @reduxjs/toolkit and react-redux
               - Build  redux store
               - connect our store to app
               - slice
               - dispatch(action)
               - selector
 -> While subscribing to the store using selector, always subscribe to a needfull portion of the store instead of whole store.
 -> to read the state in console use "current (state)"

EP 13 : testing
 -> Unit testing(testing a single unit or component)
 -> Integration testing(testing of multiple components)
 -> End to end (whole application flow testing) 





